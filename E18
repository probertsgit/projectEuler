import java.util.*;

public class E18 {

	final int numbers [] [] = {
			{75},
			{95, 64},
			{17,47,82},
			{18, 35, 87, 10},
			{20, 4, 82, 47, 65},
			{19, 1, 23, 75, 3, 34},
			{88, 2, 77, 73, 7, 63, 67},
			{99, 65, 4, 28, 6, 16, 70, 92},
			{41, 41, 26, 56, 83, 40, 80, 70, 33},
			{41, 48, 72, 33, 47, 32, 37, 16, 94, 29},
			{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14},
			{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57},
			{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48},
			{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31},
			{4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}
			};

	Node rootNode;
	int answer = 0;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println("Start");
		E18 e18 = new E18();
		e18.buildTree();
		
		e18.printTree (e18.rootNode, 0);
		System.out.println ("ANSWER="+e18.answer);
		System.out.println("End");
	}

	public void printTree (Node n1, int total)
	{
		
		//System.out.println (n1.getNum());
		if (n1 == null) {
			if (total > answer) answer = total; 
			//System.out.println ("    in null="+total);
			return;
		}
		//System.out.println (n1.getNum()+" total="+total);
		total += n1.num;
		printTree (n1.left, total);
//		printTree (n1.middle, total);
		printTree (n1.right, total);
		
//		System.out.println (rootNode.right); 
	//	System.out.println (rootNode.right.left); 
	}
	
	private void buildTree ()
	{
		//initialize 2-dimensional ragged array
		Node [] [] allNodes = new Node [15] [];
		for (int i = 0; i < (numbers.length); i++)
		{
			allNodes[i] = new Node [numbers[i].length]; 
		}
		
		// create nodes
		for (int y = 0; y < (numbers.length); y++)
		{
			for (int x = 0; x < numbers [y].length; x++) {
				//allNodes = new Node [y] [x];
				//System.out.println (numbers [y][x]);
				Node n = new Node (numbers [y][x]);
				allNodes [y] [x] = n;
			}
		}
		
		// build tree
		Node n;
		for (int y = 0; y < (numbers.length - 1); y++)
		{
			for (int x = 0; x < numbers [y].length; x++) {
//				System.out.println (numbers [i][j]);
				//Node n = new Node (numbers [y][x]);
				n = allNodes [y] [x];
				if (y==0 && x==0) rootNode = n;
				//System.out.println("Node = " + rootNode.getNum());
				//if (x > 0) n.addLink (allNodes [y+1][x-1], 'L');
				n.addLink (allNodes [y+1][x], 'L');
//				n.addLink (allNodes [y+1][x], 'M');
				n.addLink (allNodes [y+1][x+1], 'R');
			}
		}
	}
}

class Node {
	int num = 0;
//	Node left, middle, right; 
	Node left, right; 
	public Node (int in_num)
	{
		num = in_num;
//		left = null; middle = null; right = null;
		left = null; right = null;
	}
	public void addLink (Node n, char c)
	{
		if (c == 'L') {left = n;}
		//if (c == 'M') {middle = n;}
		if (c == 'R') {right = n;}
	}
	public int getNum ()
	{
		return num;
	}
}
